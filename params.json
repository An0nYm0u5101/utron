{"name":"Utron","tagline":"A lightweight MVC framework for Go(Golang)","body":"# utron [![GoDoc](https://godoc.org/github.com/gernest/utron?status.svg)](https://godoc.org/github.com/gernest/utron) [![Coverage Status](https://coveralls.io/repos/gernest/utron/badge.svg?branch=master&service=github)](https://coveralls.io/github/gernest/utron?branch=master) [![Build Status](https://travis-ci.org/gernest/utron.svg)](https://travis-ci.org/gernest/utron) [![Join the chat at https://gitter.im/gernest/utron](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gernest/utron?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n\r\n`utron` is a lightweight MVC framework in Go ([Golang](https://golang.org)) for building fast, scalable and robust database-driven web applications.\r\n\r\n# Features\r\n* [x] Postgres, MySQL and Foundation database support\r\n* [x] Modular (you can choose which components to use)\r\n* [x] Middleware support. All [alice](https://github.com/justinas/alice) compatible Middleware works out of the box\r\n* [x] Gopher spirit (write golang, use all the golang libraries you like)\r\n* [x] Lightweight. Only MVC\r\n* [x] Multiple configuration files support (currently json, yaml and toml)\r\n\r\n\r\n\r\n# Overview\r\n`utron` is a lightweight MVC framework. It is based on the principles of simplicity, relevance and elegance.\r\n\r\n* Simplicity. The design is simple, easy to understand and doesn't introduce many layers between you and the standard library. It is a goal of the project that users should be able to understand the whole framework in a single day.\r\n\r\n* Relevance. `utron` doesn't assume anything. We focus on things that matter, this way we are able to ensure easy maintenance and keep the system well-organized, well-planned and sweet.\r\n\r\n* Elegance. `utron` uses golang best practises. We are not afraid of heights, it's just that we need a parachute in our backpack. The source code is heavily documented, any functionality should be well explained and well tested.\r\n\r\n## Motivation\r\nAfter two years of playing with golang, I have looked on some of my projects and asked myself: \"How golang is that?\"\r\n\r\nSo, `utron` is my reimagining of lightweight MVC, that maintains the golang spirit, and works seamlessly with the current libraries.\r\n\r\n\r\n## Installation\r\n\r\n\t$ go get github.com/gernest/utron\r\n\r\n## The MVC\r\nThere is nothing revolutionary about MVC that `utron` brings to the table.\r\n\r\n* M is for models, they are the data structures that help with data persistence, utron uses [gorm](https://github.com/jinzhu/gorm) an existing Object Relational Mapper for golang. So if you are familiar with gorm then you are good on the M part.\r\n\r\n* V is for Views. Views are templates that render the final output. `utron` uses golang standard templates. You don't have to learn anything new, just the text/template package to master views.\r\n\r\n* C is for controllers. This is where the application logic lives. In order to achieve modularity, there are some things that utron requires of controllers. This subject is explained in more detail below.\r\n\r\nWith the power of composition and inheritance, `utron` achieves a beautiful MVC workflow. I recommend you read the source code, it is well documented so as to demystify any magical unicorns.\r\n\r\n\r\nWe will create a TODO List application in `utron` to explore all components that makes `utron` MVC tick. The source code of the final application is included in this repository and can be found here [utron todoMVC](fixtures/todo)\r\n\r\n# TODO list application with `utron`\r\n\r\n## Project structure\r\nThis is the structure of the `todo` list application that will showcase how you can build web apps with `utron`:\r\n\r\n```shell\r\ntodo\r\n├── config\r\n│   ├── app.json\r\n│   ├── app.toml\r\n│   └── app.yml\r\n├── controllers\r\n│   └── todo.go\r\n├── models\r\n│   └── todo.go\r\n├── static\r\n│   └── todo.css\r\n├── views\r\n│   ├── error.html\r\n│   └── index.html\r\n└── main.go\r\n\r\n5 directories, 9 files\r\n```\r\n\r\nI have included three configuration files to show how they work, but you are better off with just one.\r\n\r\n## Configurations\r\nutron support yaml, json and toml configurations files. In our todo app, we put the configuration files in the config directory. I have included all three formats for clarity, you can be just fine with either one of them.\r\n\r\n`utron` searches for a file named `app.json`, or `app.yml` or `app.toml` in the config directory. The first to be found is the one to be used.\r\n\r\nThis is the content of `config/app.json` file:\r\n\r\n```json\r\n{\r\n\t\"app_name\": \"utron web app\",\r\n\t\"base_url\": \"http://localhost:8090\",\r\n\t\"port\": 8090,\r\n\t\"verbose\": false,\r\n\t\"static_dir\": \"static\",\r\n\t\"view_dir\": \"views\",\r\n\t\"database\": \"postgres\",\r\n\t\"database_conn\": \"postgres://postgres:postgres@localhost/todo\"\r\n}\r\n```\r\n\r\nYou can override the values from the config file by setting environment variables. The names of the environment variables are shown below (with their details)\r\n\r\nsetting       | environment name | details\r\n--------------|------------------|----------------\r\napp_name      | APP_NAME         | application name\r\nbase_url      | BASE_URL         | the base url to use in your views\r\nport          | PORT             | port number the server will listen on\r\nverbose       | VERBOSE          | if set to true, will make all state information log to stdout\r\nstatic_dir    | STATIC_DIR       | directory to serve static files e.g. images, js or css\r\nview_dir      | VIEWS_DIR        | directory to look for views\r\ndatabase      | DATABASE         | the name of the database you use, e.g. postgres, mysql, foundation\r\ndatabase_conn | DATABASE_CONN    | connection string to your database\r\n\r\nIf you haven't specified explicitly the location of the configuration directory, it defaults to the directory named `config` in the current working directory.\r\n\r\n## Models\r\n`utron` uses the [gorm](https://github.com/jinzhu/gorm) library as its Object Relational Mapper, so you won't need to learn anything fancy. In our todo app, we need to define a `Todo` model that will be used to store our todo details.\r\n\r\nIn the file `models/todo.go` we define our todo model like this\r\n\r\n```go\r\npackage models\r\n\r\nimport (\r\n\t\"time\"\r\n\r\n\t\"github.com/gernest/utron\"\r\n)\r\n\r\ntype Todo struct {\r\n\tID        int       `schema: \"-\"`\r\n\tBody      string    `schema:\"body\"`\r\n\tCreatedAt time.Time `schema:\"-\"`\r\n\tUpdatedAt time.Time `schema:\"-\"`\r\n}\r\n\r\nfunc init() {\r\n\tutron.RegisterModels(&Todo{})\r\n}\r\n```\r\n\r\nNotice that we need to register our model by calling `utron.RegisterModels(&Todo{})` in the `init` function otherwise `utron` won't be aware of the model.\r\n\r\n`utron` will automatically create the table `todos` if it doesn't exist.\r\n\r\nDon't be confused by the `schema` tag, I just added them since we will use the [schema](https://github.com/gorilla/schema) package to decode form values(this has nothing to do with `utron`, you can use whatever form library you fancy.)\r\n\r\n\r\n## Controllers\r\n`utron` controllers are structs that implement the `Controller` interface. To help make `utron` usable, `utron` provides a `BaseController` which implements the `Controller` interface and offers additional conveniences to help in composing reusable code.\r\n\r\nYou get all the benefits of `BaseController` by embedding it in your struct. Our `TODO` Controller is in the `controller/todo.go`\r\n\r\n```go\r\npackage controllers\r\n\r\nimport (\r\n\t\"net/http\"\r\n\t\"strconv\"\r\n\r\n\t\"github.com/gernest/utron\"\r\n\t\"github.com/gernest/utron/fixtures/todo/models\"\r\n\t\"github.com/gorilla/schema\"\r\n)\r\n\r\nvar decoder = schema.NewDecoder()\r\n\r\ntype TODO struct {\r\n\t*utron.BaseController\r\n\tRoutes []string\r\n}\r\n\r\nfunc (t *TODO) Home() {\r\n\ttodos := []*models.Todo{}\r\n\tt.Ctx.DB.Order(\"created_at desc\").Find(&todos)\r\n\tt.Ctx.Data[\"List\"] = todos\r\n\tt.Ctx.Template = \"index\"\r\n\tt.HTML(http.StatusOK)\r\n}\r\nfunc (t *TODO) Create() {\r\n\ttodo := &models.Todo{}\r\n\treq := t.Ctx.Request()\r\n\treq.ParseForm()\r\n\tif err := decoder.Decode(todo, req.PostForm); err != nil {\r\n\t\tt.Ctx.Data[\"Message\"] = err.Error()\r\n\t\tt.Ctx.Template = \"error\"\r\n\t\tt.HTML(http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\r\n\tt.Ctx.DB.Create(todo)\r\n\tt.Ctx.Redirect(\"/\", http.StatusFound)\r\n}\r\n\r\nfunc (t *TODO) Delete() {\r\n\ttodoID := t.Ctx.Params[\"id\"]\r\n\tID, err := strconv.Atoi(todoID)\r\n\tif err != nil {\r\n\t\tt.Ctx.Data[\"Message\"] = err.Error()\r\n\t\tt.Ctx.Template = \"error\"\r\n\t\tt.HTML(http.StatusInternalServerError)\r\n\t\treturn\r\n\t}\r\n\tt.Ctx.DB.Delete(&models.Todo{ID: ID})\r\n\tt.Ctx.Redirect(\"/\", http.StatusFound)\r\n}\r\n\r\nfunc NewTODO() *TODO {\r\n\treturn &TODO{\r\n\t\tRoutes: []string{\r\n\t\t\t\"get;/;Home\",\r\n\t\t\t\"post;/create;Create\",\r\n\t\t\t\"get;/delete/{id};Delete\",\r\n\t\t},\r\n\t}\r\n}\r\n\r\nfunc init() {\r\n\tutron.RegisterController(NewTODO())\r\n}\r\n```\r\n\r\nNote that we registered our controller by calling `utron.RegisterController(NewTODO())` in the `init` function\r\nso as to make `utron` aware of our controller. See Routing section below for more explanation of what the controller is doing.\r\n\r\n\r\n## Routing\r\n\r\nBy registering a controller, there are two ways of assigning routes.\r\n\r\n### case 1- vanilla routing\r\nBy registering a Controller, routes are auto-generated for the controller methods. The format is `/:controller/:method` where `:controller` is the lowercase name of the Controller, and `:method` is its method in lowercase.\r\n\r\nso `(*TODO) Hello()` will map to `/todo/hello`\r\n\r\n### case 2- Specifying Routes field\r\nThe user controller can define a field named `Routes` it should be of type `[]string`, then you can assign routes by appending route string to the Routes field.\r\n\r\nThis is a better explanation from comments on the `router.go` file.\r\n\r\n```go\r\n\t\t// if there is any field named Routes, and it is of signature []string\r\n\t\t// then the field's value is used to overide the patterns defined earlier.\r\n\t\t//\r\n\t\t// It is not necessary for every user implementation to define method named Routes\r\n\t\t// If we cant find it then we just ignore its use( fallback to defaults).\r\n\t\t//\r\n\t\t// Route strings, are of the form \"httpMethods;path;method\"\r\n\t\t// where httpMethods: is a comma separated list of http method strings\r\n\t\t//                  e.g GET,POST,PUT.\r\n\t\t//                  The case does not matter, you can use lower case or upper case characters\r\n\t\t//                  or even mixed case, that is get,GET,gET and GeT will all be treated as GET\r\n\t\t//\r\n\t\t//        path:     Is a url path or pattern, utron uses the gorilla mux package. So, everything you can do\r\n\t\t//                  with gorilla mux url path then you can do here.\r\n\t\t//                  e.g /hello/{world}\r\n\t\t//                  Don't worry about the params, they will be accessible via .Ctx.Params field in your\r\n\t\t//                  controller.\r\n\t\t//\r\n\t\t//        method:   The name of the user Controller method to execute for this route.\r\n```\r\n\r\nSo, that explains the following lines in our `todo` app in `controllers/todo.go`\r\n\r\n```go\r\nfunc NewTODO() *TODO {\r\n\treturn &TODO{\r\n\t\tRoutes: []string{\r\n\t\t\t\"get;/;Home\",\r\n\t\t\t\"post;/create;Create\",\r\n\t\t\t\"get;/delete/{id};Delete\",\r\n\t\t},\r\n\t}\r\n}\r\n```\r\n### case 3: using routes file\r\nYou can define routes in a file in the `config` directory. The supported formats are json, toml and yaml.\r\n\r\n`utron` will look for file named `routes.json`, `routes.toml` or `routes.yml` in that order, the first to be found is the one to be used.\r\n\r\nI have included a sample routes file in [fixtures/config/routes.json](fixtures/config/routes.json).\r\n\r\nThe difference with case 2 above is you will need to specify the name of the controller explicitly. That is for `TODO` controller, we can define the home route string in routes file like `get;/;TODO.Home`.\r\n\r\nWe won't use this in our TODO list app, but you can find it useful in your use case.'\r\n\r\n## Views\r\n`utron` views are golang templates. This is the content of `views/index.html`:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title>Utron Todo MVC</title>\r\n\t<link href=\"/static/todo.css\" rel=\"stylesheet\">\r\n</head>\r\n<body>\r\n<form method=\"post\" action=\"/create\">\r\n    <table>\r\n        <tr>\r\n           <th>\r\n               Create A TODO\r\n           </th>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n                <input name=\"body\">\r\n            </td>\r\n            <td>\r\n                <button type=\"submit\">create</button>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</form>\r\n<table>\r\n    <tr>\r\n        <th>\r\n            My TODO LIST\r\n        </th>\r\n    </tr>\r\n    {{range $k,$v:=.List}}\r\n    <tr>\r\n        <td>\r\n            {{$v.ID}}\r\n        </td>\r\n        <td>\r\n            {{$v.Body}}\r\n        </td>\r\n        <td>\r\n            <a href=\"/delete/{{$v.ID}}\">\r\n                <button>Delete</button>\r\n            </a>\r\n        </td>\r\n    </tr>\r\n    {{end}}\r\n</table>\r\n</body>\r\n</html>\r\n```\r\n\r\n\r\nNote that we have access to `.List` in our view. This is set in the controller, additionally you can access the application configuration via `.Config` context.\r\n\r\nAbove is a simple golang template to render our `todo` list application.\r\n\r\n## The main.go file\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"github.com/gernest/utron\"\r\n\t_ \"github.com/gernest/utron/fixtures/todo/controllers\"\r\n\t_ \"github.com/gernest/utron/fixtures/todo/models\"\r\n)\r\n\r\nfunc main() {\r\n\tutron.Run()\r\n}\r\n```\r\n\r\n## Running the TODO app\r\nIn case you want to run the app we just created, it is included in this repository in [fixtures/todo](fixtures/todo)\r\n\r\n* Prerequisite\r\n - a working database connection (postgres, mysql or foundation)\r\n - golang toolchain installed and the `go` command in your system $PATH.\r\n\r\nstep 1 Install `utron` which will also include the todo app\r\n\r\n\t$ go get github.com/gernest/utron\r\n\r\nstep 2 cd into the todo app directory\r\n\r\n\t$ cd $GOPATH/src/github.com/gernest/utron/fixtures/todo\r\n\r\nstep 3 install dependency\r\n\r\n\t$ go get github.com/gorilla/schema\r\n\r\nstep 4 edit `config/app.json` by setting database and database_conn to your values\r\n\r\nstep 5 run the app\r\n\r\n\tgo run main.go\r\n\r\nIf you see something like this\r\n\r\n\t$ 2015/09/15 18:27:24 >>INFO>> starting server at http://localhost:8090\r\n\r\nThen everything is okay, open `http://localhost:8090` in your browser to start writing your todos.\r\nIf you experience anything different, redo the steps and make sure you did them in order and with no errors. If so, and it still doesn't work, open an [issue](https://github.com/gernest/utron/issues).\r\n\r\n## Screenshot\r\n![todo app with utron](fixtures/todo.png)\r\n\r\n# Contributing\r\n\r\nStart with clicking the star button to make the author and his neighbors happy. Then fork the repository and submit a pull request for whatever change you want to be added to this project.\r\n\r\nIf you have any questions, just open an issue.\r\n\r\n# Author\r\nGeofrey Ernest\r\n\r\nTwitter  : [@gernesti](https://twitter.com/gernesti)\r\n\r\n\r\n\r\n# Acknowledgements\r\nThese amazing projects have made `utron` possible:\r\n\r\n* [gorilla mux](https://github.com/gorilla/mux)\r\n* [ita](https://github.com/gernest/ita)\r\n* [gorm](https://github.com/jinzhu/gorm)\r\n* [alice](https://github.com/justinas/alice)\r\n* [golang](http://golang.org)\r\n\r\n\r\n# Roadmap\r\n\r\n*  Fix a lot of typos (English is my third language).\r\n\r\n# Licence\r\n\r\nThis project is released under the MIT licence. See [LICENCE](LICENCE) for more details.\r\n","google":"UA-73949911-1","note":"Don't delete this file! It's used internally to help with page regeneration."}